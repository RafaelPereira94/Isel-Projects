//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aenima
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AenimaEntities : DbContext
    {
        public AenimaEntities()
            : base("name=AenimaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<Employer> Employers { get; set; }
        public virtual DbSet<Equipment> Equipments { get; set; }
        public virtual DbSet<EquipmentType> EquipmentTypes { get; set; }
        public virtual DbSet<ExtraTime> ExtraTimes { get; set; }
        public virtual DbSet<Promotion> Promotions { get; set; }
        public virtual DbSet<Rent> Rents { get; set; }
        public virtual DbSet<RentPrice> RentPrices { get; set; }
        public virtual DbSet<SelectEquipmentsWithoutRentInTheLastWeek> SelectEquipmentsWithoutRentInTheLastWeeks { get; set; }
    
        public virtual int add_equipment(string description, string equipType)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var equipTypeParameter = equipType != null ?
                new ObjectParameter("EquipType", equipType) :
                new ObjectParameter("EquipType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("add_equipment", descriptionParameter, equipTypeParameter);
        }
    
        public virtual int DeletePromotion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePromotion", idParameter);
        }
    
        public virtual int InsertPromotion(Nullable<System.DateTime> begin_date, Nullable<System.DateTime> end_date, string descript, ObjectParameter id)
        {
            var begin_dateParameter = begin_date.HasValue ?
                new ObjectParameter("begin_date", begin_date) :
                new ObjectParameter("begin_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            var descriptParameter = descript != null ?
                new ObjectParameter("descript", descript) :
                new ObjectParameter("descript", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPromotion", begin_dateParameter, end_dateParameter, descriptParameter, id);
        }
    
        public virtual int RemoveEquipment(Nullable<int> code)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveEquipment", codeParameter);
        }
    
        public virtual int UpdateEquipment(string description, Nullable<int> code, string active)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            var activeParameter = active != null ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEquipment", descriptionParameter, codeParameter, activeParameter);
        }
    
        public virtual int UpdatePromotion(Nullable<int> id, Nullable<System.DateTime> begin_date, Nullable<System.DateTime> end_date, string descript)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var begin_dateParameter = begin_date.HasValue ?
                new ObjectParameter("begin_date", begin_date) :
                new ObjectParameter("begin_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new ObjectParameter("end_date", end_date) :
                new ObjectParameter("end_date", typeof(System.DateTime));
    
            var descriptParameter = descript != null ?
                new ObjectParameter("descript", descript) :
                new ObjectParameter("descript", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePromotion", idParameter, begin_dateParameter, end_dateParameter, descriptParameter);
        }
    
        public virtual int DeleteRent(Nullable<int> serial_nr)
        {
            var serial_nrParameter = serial_nr.HasValue ?
                new ObjectParameter("serial_nr", serial_nr) :
                new ObjectParameter("serial_nr", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRent", serial_nrParameter);
        }
    
        public virtual int InsertClient(string name, Nullable<int> nif, string p_address, ObjectParameter code)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var nifParameter = nif.HasValue ?
                new ObjectParameter("nif", nif) :
                new ObjectParameter("nif", typeof(int));
    
            var p_addressParameter = p_address != null ?
                new ObjectParameter("p_address", p_address) :
                new ObjectParameter("p_address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClient", nameParameter, nifParameter, p_addressParameter, code);
        }
    
        public virtual int InsertEquipment(string description, string equip_name, Nullable<int> code)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var equip_nameParameter = equip_name != null ?
                new ObjectParameter("equip_name", equip_name) :
                new ObjectParameter("equip_name", typeof(string));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEquipment", descriptionParameter, equip_nameParameter, codeParameter);
        }
    
        public virtual int InsertRent(Nullable<int> rent_time, Nullable<int> price, Nullable<int> equipCode, Nullable<int> employNmb, Nullable<int> clientCode, ObjectParameter serial_nr)
        {
            var rent_timeParameter = rent_time.HasValue ?
                new ObjectParameter("rent_time", rent_time) :
                new ObjectParameter("rent_time", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var equipCodeParameter = equipCode.HasValue ?
                new ObjectParameter("EquipCode", equipCode) :
                new ObjectParameter("EquipCode", typeof(int));
    
            var employNmbParameter = employNmb.HasValue ?
                new ObjectParameter("EmployNmb", employNmb) :
                new ObjectParameter("EmployNmb", typeof(int));
    
            var clientCodeParameter = clientCode.HasValue ?
                new ObjectParameter("clientCode", clientCode) :
                new ObjectParameter("clientCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRent", rent_timeParameter, priceParameter, equipCodeParameter, employNmbParameter, clientCodeParameter, serial_nr);
        }
    
        public virtual int InsertRentAndClient(Nullable<int> rent_time, Nullable<int> price, Nullable<int> equipCode, Nullable<int> employNr, string clientName, Nullable<int> clientNif, string clientAddress, ObjectParameter serial_nr, ObjectParameter clientCode)
        {
            var rent_timeParameter = rent_time.HasValue ?
                new ObjectParameter("rent_time", rent_time) :
                new ObjectParameter("rent_time", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var equipCodeParameter = equipCode.HasValue ?
                new ObjectParameter("equipCode", equipCode) :
                new ObjectParameter("equipCode", typeof(int));
    
            var employNrParameter = employNr.HasValue ?
                new ObjectParameter("employNr", employNr) :
                new ObjectParameter("employNr", typeof(int));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("clientName", clientName) :
                new ObjectParameter("clientName", typeof(string));
    
            var clientNifParameter = clientNif.HasValue ?
                new ObjectParameter("clientNif", clientNif) :
                new ObjectParameter("clientNif", typeof(int));
    
            var clientAddressParameter = clientAddress != null ?
                new ObjectParameter("clientAddress", clientAddress) :
                new ObjectParameter("clientAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRentAndClient", rent_timeParameter, priceParameter, equipCodeParameter, employNrParameter, clientNameParameter, clientNifParameter, clientAddressParameter, serial_nr, clientCode);
        }
    
        public virtual ObjectResult<ListFreeEquipments_Result> ListFreeEquipments(Nullable<System.DateTime> date, string equipType_Name)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var equipType_NameParameter = equipType_Name != null ?
                new ObjectParameter("equipType_Name", equipType_Name) :
                new ObjectParameter("equipType_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListFreeEquipments_Result>("ListFreeEquipments", dateParameter, equipType_NameParameter);
        }
    
        public virtual int UpdateRentPrice(string name_type, Nullable<int> id, Nullable<System.DateTime> validity, Nullable<int> price, Nullable<int> p_time)
        {
            var name_typeParameter = name_type != null ?
                new ObjectParameter("name_type", name_type) :
                new ObjectParameter("name_type", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var validityParameter = validity.HasValue ?
                new ObjectParameter("validity", validity) :
                new ObjectParameter("validity", typeof(System.DateTime));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var p_timeParameter = p_time.HasValue ?
                new ObjectParameter("p_time", p_time) :
                new ObjectParameter("p_time", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRentPrice", name_typeParameter, idParameter, validityParameter, priceParameter, p_timeParameter);
        }
    }
}
